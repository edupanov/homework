{"version":3,"sources":["components/TodoList.module.css","components/common/Input/Input.module.css","components/common/Checkbox/Checkbox.module.css","components/common/Button/Button.module.css","components/common/Checkbox/Checkbox.tsx","components/common/Button/Button.tsx","components/common/Input/Input.tsx","components/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Checkbox","props","checked","type","id","htmlFor","className","s","tick","Button","onClick","six","text","Input","div_input","input","value","onChange","onKeyPress","TodoList","useState","taskName","setTaskName","addTask","title","add_task","e","currentTarget","key","ul","tasks","map","t","li","isDone","span","view","removeTask","button_group","changeFilter","App","v1","complexity","setTasks","filter","setFilter","tasksForTodoList","newTaskName","newTask","newTasks","alert","Tasks","length","lengthTasks","tasksId","filteredTasks","newFilterValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ff23d9e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ul\":\"TodoList_ul__3cAZf\",\"li\":\"TodoList_li__3YZ67\",\"span\":\"TodoList_span__M3Lct\",\"add_task\":\"TodoList_add_task__37gGC\",\"button_group\":\"TodoList_button_group__3ajy1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__1rj7t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tick\":\"Checkbox_tick__3WTTn\",\"cb-pop\":\"Checkbox_cb-pop__3dUhm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"six\":\"Button_six__pbIo1\"};","import React from \"react\";\nimport s from \"./Checkbox.module.css\"\n\ntype CheckboxType = {\n    checked: boolean\n    type: string\n    id: string\n}\n\nexport function Checkbox(props: CheckboxType) {\n\n    return (\n        <div>\n            <input\n                checked={props.checked}\n                type={props.type}\n                id={props.id}/>\n            <label htmlFor=\"cb1\">\n                <div className={s.tick}/>\n            </label>\n        </div>\n    )\n}\n\n\n","import React from \"react\";\nimport s from \"./Button.module.css\"\n\ntype ButtonType = {\n    onClick: () => void\n    text: string\n}\n\nexport function Button(props: ButtonType) {\n\n    return (\n        <div>\n            <button onClick={props.onClick} className={s.six}>{props.text}</button>\n        </div>\n    )\n}\n\n\n","import React, {ChangeEvent, KeyboardEvent} from \"react\";\nimport s from \"./Input.module.css\"\n\ntype InputType = {\n    type: string\n    value: string\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\n    onKeyPress: (e: KeyboardEvent<HTMLInputElement>) => void\n}\n\nexport function Input(props: InputType) {\n\n    return (\n        <div className={s.div_input}>\n            <input className={s.input}\n                type={props.type}\n                value={props.value}\n                onChange={props.onChange}\n                onKeyPress={props.onKeyPress}\n            />\n        </div>\n    )\n}\n\n\n","import React, {useState, ChangeEvent, KeyboardEvent} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"../App\";\r\nimport {Checkbox} from \"./common/Checkbox/Checkbox\";\r\nimport s from \"./TodoList.module.css\"\r\nimport {Button} from \"./common/Button/Button\";\r\nimport {Input} from \"./common/Input/Input\";\r\n\r\n\r\ntype TodoListPropsType = {\r\n    title: string,\r\n    tasks: Array<TaskType>,\r\n    addTask: (newTaskName: string) => void,\r\n    removeTask: (taskId: string) => void,\r\n    changeFilter: (newFilterValue: FilterValuesType) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n    let [taskName, setTaskName] = useState(\"\");\r\n    let addTask = () => {\r\n        props.addTask(taskName);\r\n        setTaskName(\"\");\r\n    }\r\n\r\n    function onTaskNameChanged(e: ChangeEvent<HTMLInputElement>) {\r\n        setTaskName(e.currentTarget.value)\r\n    }\r\n\r\n    function onAddTaskKeyPressed(e: KeyboardEvent<HTMLInputElement>) {\r\n        if (e.key === \"Enter\") {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}</h3>\r\n            <div className={s.add_task}>\r\n                <Input\r\n                    type=\"text\"\r\n                    value={taskName}\r\n                    onChange={onTaskNameChanged}\r\n                    onKeyPress={onAddTaskKeyPressed}\r\n                />\r\n                <Button\r\n                    onClick={addTask}\r\n                    text={\"+\"}/>\r\n            </div>\r\n            <ul className={s.ul}>\r\n                {props.tasks.map((t) => {\r\n                    let removeTask = () => {\r\n                        props.removeTask(t.id)\r\n                    }\r\n                    return (\r\n                        <li className={s.li} key={t.id}>\r\n                            <Checkbox\r\n                                checked={t.isDone}\r\n                                type=\"checkbox\"\r\n                                id=\"cb1\"\r\n                            />\r\n                            <span className={s.span}>{t.view}</span>\r\n                            <Button\r\n                                onClick={removeTask}\r\n                                text={\"x\"}\r\n                            />\r\n                        </li>\r\n\r\n                    )\r\n                })}\r\n            </ul>\r\n            <div className={s.button_group}>\r\n                <Button onClick={() => {\r\n                    props.changeFilter(\"all\")\r\n                }} text={\"All\"}/>\r\n                <Button onClick={() => {\r\n                    props.changeFilter(\"completed\")\r\n                }} text={\"Completed\"}/>\r\n                <Button onClick={() => {\r\n                    props.changeFilter(\"low\")\r\n                }} text={\"Low\"}/>\r\n                <Button onClick={() => {\r\n                    props.changeFilter(\"middle\")\r\n                }} text={\"Middle\"}/>\r\n                <Button onClick={() => {\r\n                    props.changeFilter(\"height\")\r\n                }} text={\"Height\"}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./components/TodoList\";\r\nimport {v1} from 'uuid';\r\n\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    view: string,\r\n    complexity: string,\r\n    isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"low\" | \"middle\" | \"height\"\r\n\r\nfunction App() {\r\n\r\n    let [tasks, setTasks] = useState<Array<TaskType>>([\r\n        {id: v1(), view: \"работа\", complexity: \"height\", isDone: true},\r\n        {id: v1(), view: \"аниме\", complexity: \"low\", isDone: false},\r\n        {id: v1(), view: \"игры\", complexity: \"middle\", isDone: true},\r\n        {id: v1(), view: \"реакт\", complexity: \"height\", isDone: false},\r\n        {id: v1(), view: \"хтмл\", complexity: \"low\", isDone: true}\r\n    ])\r\n\r\n    let [filter, setFilter] = useState<FilterValuesType>(\"all\")\r\n\r\n    function lengthTasks() {\r\n        let Tasks = tasks.length\r\n        alert(`Hi you have ${Tasks} tasks`)\r\n\r\n    }\r\n\r\n    function addTask(newTaskName: string) {\r\n        let newTask = {id: v1(), view: newTaskName, complexity:\"height\", isDone: false};\r\n\r\n        if (newTask.view !== \"\"){\r\n            let newTasks = [newTask, ...tasks];\r\n            setTasks(newTasks)\r\n            alert(`Hi you added new task \"${newTask.view}\"`)\r\n        } else lengthTasks()\r\n\r\n    }\r\n\r\n    function removeTask(tasksId: string) {\r\n        let filteredTasks = tasks.filter((t) => t.id !== tasksId)\r\n        setTasks(filteredTasks)\r\n    }\r\n\r\n    function changeFilter(newFilterValue: FilterValuesType) {\r\n        setFilter(newFilterValue)\r\n    }\r\n\r\n    let tasksForTodoList = tasks;\r\n    if (filter === \"low\") {\r\n        tasksForTodoList = tasks.filter(t => t.complexity === \"low\")\r\n    }\r\n    if (filter === \"middle\") {\r\n        tasksForTodoList = tasks.filter(t => t.complexity === \"middle\")\r\n    }\r\n    if (filter === \"height\") {\r\n        tasksForTodoList = tasks.filter(t => t.complexity === \"height\")\r\n    }\r\n    if (filter === \"completed\") {\r\n        tasksForTodoList = tasks.filter(t => t.isDone)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <TodoList\r\n                title={\"My plan to day\"}\r\n                tasks={tasksForTodoList}\r\n                addTask={addTask}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}